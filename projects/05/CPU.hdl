// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

// The 16-bit value of the CPU’s instruction input represents either an A-instruction or a C-
// instruction. In order to figure out the semantics of this instruction, we can parse, or unpack 
// it, into the following fields: “ixxaccccccdddjjj”. The i-bit (also known as opcode) codes the
// instruction type, which is either 0 for an A-instruction or 1 for a C-instruction. In case of an
// A- instruction, the entire instruction represent the 16-bit value of the constant that should be
// loaded into the A register. In case of a C-instruction, the a- and c-bits code the comp part of
// the instruction, while the d- and j-bits code the dest and jump parts of the instruction,
// respectively (the x-bits are not used, and can be ignored).

// ixxaccccccADMjjj

    Mux16(a=instruction, b=ALUOutput, sel=instruction[0], out=regAInput);

    // Register A
    Register(in=regAInput, load=instruction[10], out=regA, out=addressM);

    // DMux4Way(in=, sel=, a=, b=, c=, d=);

    // Register D
    //       ixxaccccccdddjjj
    // M=A = 1110110000001000
    // D=A = 1110110000010000
    Register(in=ALUOutput, load=instruction[11], out=regD);

    // Pass on either A or M value
    //         ixxaccccccdddjjj
    // D=D-A = 1110010011010000
    // D=D-M = 1111010011010000
    Mux16(a=regA, b=inM, sel=instruction[3], out=ALUinputY);


    
    // if we are not jumping then inc=1 else inc=0
    JMP(jumps=instruction[13..15], zr=isZeroOutput, ng=isNegOutput, out=willJump);
    Not(in=willJump, out=notJump);
    PC(in=regA, load=willJump, inc=notJump, reset=reset, out=pc);

    // x come from D reg and y comes from either A or M
    ALU(x=regD, y=ALUinputY,
        zx=instruction[4], nx=instruction[5],
        zy=instruction[6], ny=instruction[7],
        f=instruction[8], no=instruction[9],
        out=ALUOutput, zr=isZeroOutput, ng=isNegOutput);
    
    // instruction[12] is writeM bit
    And(a=instruction[12], b=true, out=writeM);
}